from flask import Flask, request, jsonify
import openpyxl
import random
import re
import os

app = Flask(__name__)

# üìÇ –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É (–æ–Ω –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å app.py)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
excel_path = os.path.join(BASE_DIR, "questions.xlsx")

if not os.path.exists(excel_path):
    raise FileNotFoundError(f"–§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
workbook = openpyxl.load_workbook(excel_path)
sheet_names = workbook.sheetnames

quizzes = {}

# üîπ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def parse_options(options_str):
    return [opt.strip() for opt in str(options_str).split(';') if opt.strip()]

def parse_correct(correct_str):
    correct_list = []
    for item in str(correct_str).split(";"):
        match = re.match(r"([–ê-–Ø–Å]\))", item.strip())
        if match:
            correct_list.append(match.group(1))
    return correct_list

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
for sheet_name in sheet_names:
    sheet = workbook[sheet_name]
    data = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if all(cell is None for cell in row):
            continue
        row_data = tuple((str(cell).strip() if cell is not None else "") for cell in (row + (None, None, None, None))[:4])
        question, options, correct, explanation = row_data
        data.append({
            "–í–æ–ø—Ä–æ—Å": question,
            "–í–∞—Ä–∏–∞–Ω—Ç—ã": parse_options(options),
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π": parse_correct(correct),
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": explanation
        })
    quizzes[sheet_name] = data

def get_random_question(topic):
    return random.choice(quizzes[topic])

# ===============================
# üöÄ –û–°–ù–û–í–ù–û–ô –í–ï–ë–•–£–ö –î–õ–Ø –ê–õ–ò–°–´
# ===============================
@app.route("/", methods=["POST"])
def main():
    req = request.json
    session = req.get("session", {})
    state = req.get("state", {}).get("session", {})
    command = req["request"]["command"].strip()

    response = {
        "version": req["version"],
        "session": req["session"],
        "response": {"end_session": False}
    }

    # –°–æ–∑–¥–∞—ë–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–∞ -> –ª–∏—Å—Ç Excel
    number_to_sheet = {str(i+1): name for i, name in enumerate(sheet_names)}

    # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏
    if session.get("new", False):
        buttons = [{"title": f"{i+1}. {name}"} for i, name in enumerate(sheet_names)]
        response["response"]["text"] = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é:"
        response["response"]["buttons"] = buttons
        return jsonify(response)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    selected_topic = None
    for i, name in enumerate(sheet_names):
        if command == str(i+1) or command.lower() == name.lower():
            selected_topic = name
            break

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±–ª–æ–∫
    if selected_topic:
        question = get_random_question(selected_topic)
        response["response"]["text"] = (
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ "{selected_topic}". –ù–∞—á–Ω—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n{question["–í–æ–ø—Ä–æ—Å"]}\n'
            f'–í–∞—Ä–∏–∞–Ω—Ç—ã:\n' + "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(question["–í–∞—Ä–∏–∞–Ω—Ç—ã"])])
        )
        response["session_state"] = {"topic": selected_topic, "question": question}
        return jsonify(response)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if state.get("question"):
        topic = state["topic"]
        question = state["question"]
        correct = question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"]

        # –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answers = re.findall(r'[–ê-–Ø–Å]\)', command.upper())
        if not user_answers:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ü–∏—Ñ—Ä—É
            mapping = {str(i+1): opt for i, opt in enumerate(question["–í–∞—Ä–∏–∞–Ω—Ç—ã"])}
            user_answers = [mapping.get(command.strip())] if mapping.get(command.strip()) else []

        if sorted(user_answers) == sorted(correct):
            next_q = get_random_question(topic)
            response["response"]["text"] = (
                f"–í–µ—Ä–Ω–æ! üéâ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_q['–í–æ–ø—Ä–æ—Å']}\n"
                f'–í–∞—Ä–∏–∞–Ω—Ç—ã:\n' + "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(next_q["–í–∞—Ä–∏–∞–Ω—Ç—ã"])])
            )
            response["session_state"] = {"topic": topic, "question": next_q}
        else:
            response["response"]["text"] = (
                f"–ù–µ–≤–µ—Ä–Ω–æ üò¢\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(correct)}\n{question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –∑–∞–Ω–æ–≤–æ."
            )
            response["response"]["buttons"] = [{"title": f"{i+1}. {name}"} for i, name in enumerate(sheet_names)]
            response["session_state"] = {}

        return jsonify(response)

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞
    response["response"]["text"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é."
    response["response"]["buttons"] = [{"title": f"{i+1}. {name}"} for i, name in enumerate(sheet_names)]
    return jsonify(response)

# ===============================
# üåê –ü–†–û–í–ï–†–û–ß–ù–´–ô –ú–ê–†–®–†–£–¢
# ===============================
@app.route("/", methods=["GET"])
def home():
    return "–ù–∞–≤—ã–∫ –ê–ª–∏—Å—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200


# ===============================
# üî• –ó–ê–ü–£–°–ö
# ===============================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
