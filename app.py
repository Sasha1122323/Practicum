from flask import Flask, request, jsonify
import openpyxl
import random
import re
import os
import logging
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üìÇ –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
excel_path = os.path.join(BASE_DIR, "questions.xlsx")

if not os.path.exists(excel_path):
    raise FileNotFoundError(f"–§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
workbook = openpyxl.load_workbook(excel_path)
sheet_names = workbook.sheetnames


# ===============================
# üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤
# ===============================
def parse_options(options_str):
    if not options_str:
        return []
    return [opt.strip() for opt in str(options_str).split(';') if opt.strip()]


def parse_correct(correct_str):
    if not correct_str:
        return []
    matches = re.findall(r'([–ê-–Ø–ÅA-Z]\))', str(correct_str))
    return matches


quizzes = {}
for sheet_name in sheet_names:
    sheet = workbook[sheet_name]
    data = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if all(cell is None for cell in row):
            continue
        question, options, correct, explanation = (row + (None, None, None, None))[:4]
        if not question:
            continue
        data.append({
            "–í–æ–ø—Ä–æ—Å": str(question).strip(),
            "–í–∞—Ä–∏–∞–Ω—Ç—ã": parse_options(options),
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π": parse_correct(correct),
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": str(explanation).strip() if explanation else ""
        })
    quizzes[sheet_name] = data


def get_random_question(topic):
    if topic not in quizzes or not quizzes[topic]:
        return None
    return random.choice(quizzes[topic])


def normalize_answer(user_answer):
    if not user_answer:
        return ""
    user_answer = user_answer.strip().lower()
    digit_to_letter = {"1": "–∞", "2": "–±", "3": "–≤", "4": "–≥", "5": "–¥", "6": "–µ"}
    if user_answer in digit_to_letter:
        return digit_to_letter[user_answer]
    user_answer = re.sub(r'[).\s]', '', user_answer)
    return user_answer[0] if user_answer else ""


def normalize_correct_answers(correct_answers):
    normalized = []
    for answer in correct_answers:
        clean_answer = re.sub(r'[)\s]', '', answer).lower()
        if clean_answer:
            normalized.append(clean_answer[0])
    return normalized


def parse_multiple_answers(command):
    """–ü–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    cleaned = re.sub(r'[.,;]', ' ', command.lower())
    answers = cleaned.split()

    normalized_answers = []
    for answer in answers:
        normalized = normalize_answer(answer)
        if normalized and normalized in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è':
            normalized_answers.append(normalized)

    return normalized_answers


# ===============================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π Webhook
# ===============================
@app.route("/", methods=["POST"])
def main():
    try:
        req = request.json
        if not req:
            return jsonify_error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")

        command = req["request"]["command"].strip().lower()
        session = req.get("session", {})

        # üî¥ –í–ê–ñ–ù–û: –ø–æ–ª—É—á–∞–µ–º state –∏–∑ session
        state = req.get("state", {}).get("session", {})

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: –∫–æ–º–∞–Ω–¥–∞='{command}', session_id={session.get('session_id')}")

        response = {
            "version": req["version"],
            "session": req["session"],
            "response": {"end_session": False, "text": "", "buttons": []},
            "session_state": {}  # üî¥ –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º session_state –≤–º–µ—Å—Ç–æ user_state_update
        }

        # 1Ô∏è‚É£ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if session.get("new", False):
            buttons = [{"title": name} for name in sheet_names]
            response["response"]["text"] = "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            response["response"]["buttons"] = buttons
            logger.info("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
            return jsonify(response)

        # 2Ô∏è‚É£ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        if command in ["–Ω–∞–∑–∞–¥", "–≤ –º–µ–Ω—é", "–º–µ–Ω—é", "–≥–ª–∞–≤–Ω–∞—è"]:
            buttons = [{"title": name} for name in sheet_names]
            response["response"]["text"] = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
            response["response"]["buttons"] = buttons
            response["session_state"] = {}  # üî¥ –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
            return jsonify(response)

        # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        for sheet_name in sheet_names:
            if command == sheet_name.lower():
                topic = sheet_name
                question = get_random_question(topic)
                if not question:
                    response["response"]["text"] = f"–í —Ç–µ–º–µ '{topic}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
                    response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
                    logger.warning(f"–í —Ç–µ–º–µ '{topic}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
                    return jsonify(response)

                options_text = "\n".join([f"{opt}" for opt in question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if question["–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
                response_text = (
                    f'–¢–µ–º–∞: "{topic}"\n\n'
                    f'{question["–í–æ–ø—Ä–æ—Å"]}\n\n'
                    f'{options_text}'
                )

                # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if len(response_text) > 1000:
                    response_text = response_text[:997] + "..."

                response["response"]["text"] = response_text
                response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]

                # üî¥ –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ session_state
                response["session_state"] = {
                    "topic": topic,
                    "question": question,
                    "previous_questions": [question["–í–æ–ø—Ä–æ—Å"]]
                }

                logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ '{topic}'")
                return jsonify(response)

        # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞
        if state.get("topic") and state.get("question"):
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (–Ω–µ —Ü–∏—Ñ—Ä–∞ –∏ –Ω–µ –±—É–∫–≤–∞), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é
            normalized_command = normalize_answer(command)
            if not normalized_command or normalized_command not in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è':
                response["response"]["text"] = (
                    f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–º–µ '{state['topic']}'. "
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                response["session_state"] = state
                logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞: '{command}'")
                return jsonify(response)

        # 5Ô∏è‚É£ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if state.get("topic") and state.get("question"):
            topic = state["topic"]
            current_question = state["question"]
            previous_questions = state.get("previous_questions", [])

            user_answers = parse_multiple_answers(command)
            correct_answers_normalized = normalize_correct_answers(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])

            if user_answers:
                correct_given = [ans for ans in user_answers if ans in correct_answers_normalized]
                incorrect_given = [ans for ans in user_answers if ans not in correct_answers_normalized]

                if not incorrect_given and set(user_answers) == set(correct_answers_normalized):
                    text = f"‚úÖ –í–µ—Ä–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(current_question['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π'])}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
                    logger.info(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {user_answers}")
                elif not incorrect_given:
                    missing = [ans for ans in correct_answers_normalized if ans not in user_answers]
                    missing_text = ", ".join([f"{ans.upper()})" for ans in missing])
                    text = f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing_text}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
                    logger.info(f"–ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {user_answers}, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing}")
                else:
                    correct_text = ", ".join(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])
                    incorrect_text = ", ".join([f"{ans.upper()})" for ans in incorrect_given])
                    text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {incorrect_text}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
                    logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {user_answers}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {correct_answers_normalized}")
            else:
                correct_text = ", ".join(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])
                text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
                logger.info(f"–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –æ—Ç–≤–µ—Ç: '{command}'")

            # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            next_question = get_random_question(topic, previous_questions)
            if next_question:
                options_text = "\n".join([f"{opt}" for opt in next_question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if next_question[
                    "–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
                text += (
                    f"\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_question['–í–æ–ø—Ä–æ—Å']}\n\n"
                    f"{options_text}"
                )
                # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if len(text) > 1000:
                    text = text[:997] + "..."

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
                updated_previous_questions = previous_questions + [next_question["–í–æ–ø—Ä–æ—Å"]]
                response["session_state"] = {
                    "topic": topic,
                    "question": next_question,
                    "previous_questions": updated_previous_questions
                }
            else:
                text += "\n\nüéâ –í–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Ç–µ–º–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
                response["session_state"] = {}

            response["response"]["text"] = text
            response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
            return jsonify(response)

        # 6Ô∏è‚É£ –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        buttons = [{"title": name} for name in sheet_names]
        response["response"]["text"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ üëá"
        response["response"]["buttons"] = buttons
        logger.info(f"–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{command}'")
        return jsonify(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify_error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def jsonify_error(message):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    return jsonify({
        "version": "1.0",
        "response": {"text": message, "end_session": False},
        "session_state": {}  # üî¥ –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º session_state
    })


@app.route("/", methods=["GET"])
def home():
    return jsonify({
        "status": "success",
        "message": "–ù–∞–≤—ã–∫ –ê–ª–∏—Å—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "topics_loaded": list(quizzes.keys()),
        "questions_count": {topic: len(questions) for topic, questions in quizzes.items()}
    })


@app.route("/health", methods=["GET"])
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({"status": "healthy", "timestamp": str(datetime.now())})


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ù–ê –ü–û–†–¢–£ {port}")
    app.run(host="0.0.0.0", port=port, debug=False)