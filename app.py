from flask import Flask, request, jsonify
import openpyxl
import random
import re
import os

app = Flask(__name__)

# üìÇ –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
excel_path = os.path.join(BASE_DIR, "questions.xlsx")

if not os.path.exists(excel_path):
    raise FileNotFoundError(f"–§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
workbook = openpyxl.load_workbook(excel_path)
sheet_names = workbook.sheetnames


# ===============================
# üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤
# ===============================
def parse_options(options_str):
    if not options_str:
        return []
    return [opt.strip() for opt in str(options_str).split(';') if opt.strip()]


def parse_correct(correct_str):
    if not correct_str:
        return []
    # –ò—â–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ø–∞ "–ê)", "–ë)", "–í)" –≤ —Ç–µ–∫—Å—Ç–µ
    matches = re.findall(r'([–ê-–Ø–ÅA-Z]\))', str(correct_str))
    return matches


def parse_multiple_answers(command):
    """–ü–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º/–∑–∞–ø—è—Ç—ã–º
    cleaned = re.sub(r'[.,;]', ' ', command.lower())
    answers = cleaned.split()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç
    normalized_answers = []
    for answer in answers:
        normalized = normalize_answer(answer)
        if normalized and normalized in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è':
            normalized_answers.append(normalized)

    return normalized_answers

quizzes = {}
for sheet_name in sheet_names:
    sheet = workbook[sheet_name]
    data = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if all(cell is None for cell in row):
            continue
        question, options, correct, explanation = (row + (None, None, None, None))[:4]
        if not question:
            continue
        data.append({
            "–í–æ–ø—Ä–æ—Å": str(question).strip(),
            "–í–∞—Ä–∏–∞–Ω—Ç—ã": parse_options(options),
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π": parse_correct(correct),
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": str(explanation).strip() if explanation else ""
        })
    quizzes[sheet_name] = data


def get_random_question(topic, previous_questions=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ"""
    if topic not in quizzes or not quizzes[topic]:
        return None

    if previous_questions is None:
        previous_questions = []

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏
    available_questions = [q for q in quizzes[topic] if q["–í–æ–ø—Ä–æ—Å"] not in previous_questions]

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if not available_questions:
        available_questions = quizzes[topic]

    return random.choice(available_questions)


def normalize_answer(user_answer):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ–æ—Ä–º–∞—Ç—É –±—É–∫–≤—ã –±–µ–∑ —Å–∫–æ–±–æ–∫"""
    if not user_answer:
        return ""

    user_answer = user_answer.strip().lower()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä –≤ –±—É–∫–≤—ã
    digit_to_letter = {"1": "–∞", "2": "–±", "3": "–≤", "4": "–≥", "5": "–¥", "6": "–µ"}
    if user_answer in digit_to_letter:
        return digit_to_letter[user_answer]

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–æ–±–æ–∫, —Ç–æ—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
    user_answer = re.sub(r'[).\s]', '', user_answer)
    return user_answer[0] if user_answer else ""


def normalize_correct_answers(correct_answers):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É –±—É–∫–≤ –±–µ–∑ —Å–∫–æ–±–æ–∫"""
    normalized = []
    for answer in correct_answers:
        # –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        clean_answer = re.sub(r'[)\s]', '', answer).lower()
        if clean_answer:
            normalized.append(clean_answer[0])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
    return normalized


# ===============================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π Webhook
# ===============================
@app.route("/", methods=["POST"])
def main():
    req = request.json
    command = req["request"]["command"].strip().lower()
    session = req.get("session", {})

    # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_state –≤–º–µ—Å—Ç–æ session_state
    state = req.get("state", {}).get("user", {})

    response = {
        "version": req["version"],
        "session": req["session"],
        "response": {"end_session": False, "text": "", "buttons": []},
        "user_state_update": {}  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }

    # 1Ô∏è‚É£ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if session.get("new", False):
        buttons = [{"title": name} for name in sheet_names]
        response["response"]["text"] = "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        response["response"]["buttons"] = buttons
        return jsonify(response)

    # 2Ô∏è‚É£ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if command in ["–Ω–∞–∑–∞–¥", "–≤ –º–µ–Ω—é", "–º–µ–Ω—é", "–≥–ª–∞–≤–Ω–∞—è"]:
        buttons = [{"title": name} for name in sheet_names]
        response["response"]["text"] = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
        response["response"]["buttons"] = buttons
        response["user_state_update"] = {}  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return jsonify(response)

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    for sheet_name in sheet_names:
        if command == sheet_name.lower():
            topic = sheet_name
            question = get_random_question(topic)
            if not question:
                response["response"]["text"] = f"–í —Ç–µ–º–µ '{topic}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
                response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
                return jsonify(response)

            options_text = "\n".join([f"{opt}" for opt in question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if question["–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
            response["response"]["text"] = (
                f'–¢–µ–º–∞: "{topic}"\n\n'
                f'{question["–í–æ–ø—Ä–æ—Å"]}\n\n'
                f'{options_text}'
            )
            response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_state_update
            response["user_state_update"] = {
                "topic": topic,
                "question": question,
                "previous_questions": [question["–í–æ–ø—Ä–æ—Å"]]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
            }
            return jsonify(response)

    # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞
    if state.get("topic") and state.get("question"):
        # –°–ø–∏—Å–æ–∫ —è–≤–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞
        invalid_commands = ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–ø—Ä–∞–≤–∏–ª–∞", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]

        if command in invalid_commands:
            response["response"]["text"] = (
                f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–º–µ '{state['topic']}'. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
            response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            response["user_state_update"] = state
            return jsonify(response)

    # 5Ô∏è‚É£ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º user_state
    # 5Ô∏è‚É£ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º user_state
    if state.get("topic") and state.get("question"):
        topic = state["topic"]
        current_question = state["question"]
        previous_questions = state.get("previous_questions", [])

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        user_answers = parse_multiple_answers(command)  # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤!
        correct_answers_normalized = normalize_correct_answers(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
        if user_answers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç
            correct_given = [ans for ans in user_answers if ans in correct_answers_normalized]
            incorrect_given = [ans for ans in user_answers if ans not in correct_answers_normalized]

            if not incorrect_given and set(user_answers) == set(correct_answers_normalized):
                # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –Ω—É–∂–Ω—ã–µ
                text = f"‚úÖ –í–µ—Ä–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(current_question['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π'])}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
            elif not incorrect_given:
                # –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –Ω–æ –Ω–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã
                missing = [ans for ans in correct_answers_normalized if ans not in user_answers]
                missing_text = ", ".join([f"{ans.upper()})" for ans in missing])
                text = f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing_text}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
            else:
                # –ï—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                correct_text = ", ".join(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])
                incorrect_text = ", ".join([f"{ans.upper()})" for ans in incorrect_given])
                text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {incorrect_text}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
        else:
            # –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            correct_text = ", ".join(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])
            text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}\n\n{current_question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"

        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        next_question = get_random_question(topic, previous_questions)
        if next_question:
            options_text = "\n".join([f"{opt}" for opt in next_question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if next_question[
                "–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
            text += (
                f"\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_question['–í–æ–ø—Ä–æ—Å']}\n\n"
                f"{options_text}"
            )
            updated_previous_questions = previous_questions + [next_question["–í–æ–ø—Ä–æ—Å"]]
            response["user_state_update"] = {
                "topic": topic,
                "question": next_question,
                "previous_questions": updated_previous_questions
            }
        else:
            text += "\n\nüéâ –í–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Ç–µ–º–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
            response["user_state_update"] = {}

        response["response"]["text"] = text
        response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
        return jsonify(response)
    # 6Ô∏è‚É£ –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    buttons = [{"title": name} for name in sheet_names]
    response["response"]["text"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ üëá"
    response["response"]["buttons"] = buttons
    return jsonify(response)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GET
@app.route("/", methods=["GET"])
def home():
    return "–ù–∞–≤—ã–∫ –ê–ª–∏—Å—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=False)