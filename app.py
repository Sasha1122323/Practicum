from flask import Flask, request, jsonify
import openpyxl
import random
import re
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üìÇ –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
excel_path = os.path.join(BASE_DIR, "questions.xlsx")

if not os.path.exists(excel_path):
    raise FileNotFoundError(f"–§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
workbook = openpyxl.load_workbook(excel_path)
sheet_names = workbook.sheetnames


# ===============================
# üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤
# ===============================
def parse_options(options_str):
    if not options_str:
        return []
    return [opt.strip() for opt in str(options_str).split(';') if opt.strip()]


def parse_correct(correct_str):
    if not correct_str:
        return []
    matches = re.findall(r'([–ê-–Ø–ÅA-Z]\))', str(correct_str))
    return matches


quizzes = {}
for sheet_name in sheet_names:
    sheet = workbook[sheet_name]
    data = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if all(cell is None for cell in row):
            continue
        question, options, correct, explanation = (row + (None, None, None, None))[:4]
        if not question:
            continue
        data.append({
            "–í–æ–ø—Ä–æ—Å": str(question).strip(),
            "–í–∞—Ä–∏–∞–Ω—Ç—ã": parse_options(options),
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π": parse_correct(correct),
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": str(explanation).strip() if explanation else ""
        })
    quizzes[sheet_name] = data


def get_random_question(topic, previous_questions=None):
    if topic not in quizzes or not quizzes[topic]:
        return None

    if previous_questions is None:
        previous_questions = []

    available_questions = [q for q in quizzes[topic] if q["–í–æ–ø—Ä–æ—Å"] not in previous_questions]

    if not available_questions:
        available_questions = quizzes[topic]

    return random.choice(available_questions)


def normalize_answer(user_answer):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ—Ç–≤–µ—Ç, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 1-6 –∏ –±—É–∫–≤—ã –∞-–µ"""
    if not user_answer:
        return ""

    user_answer = user_answer.strip().lower()

    # üî• –¢–û–õ–¨–ö–û —Ü–∏—Ñ—Ä—ã 1-6
    digit_to_letter = {"1": "–∞", "2": "–±", "3": "–≤", "4": "–≥", "5": "–¥", "6": "–µ"}
    if user_answer in digit_to_letter:
        return digit_to_letter[user_answer]

    # –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏, —Ç–æ—á–∫–∏, –ø—Ä–æ–±–µ–ª—ã
    user_answer = re.sub(r'[).\s,]', '', user_answer)

    # üî• –¢–û–õ–¨–ö–û –ø–µ—Ä–≤—ã–µ 6 –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (–∞-–µ)
    if user_answer and user_answer[0] in '–∞–±–≤–≥–¥–µ':
        return user_answer[0]

    return ""


def normalize_correct_answers(correct_answers):
    normalized = []
    for answer in correct_answers:
        clean_answer = re.sub(r'[)\s]', '', answer).lower()
        if clean_answer and clean_answer[0] in '–∞–±–≤–≥–¥–µ':
            normalized.append(clean_answer[0])
    return normalized


def parse_multiple_answers(command):
    """–ü–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–∏—Ñ—Ä—ã/–±—É–∫–≤—ã"""
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –∑–∞–ø—è—Ç—ã–º, —Ç–æ—á–∫–∞–º
    cleaned = re.sub(r'[.,;]', ' ', command.lower())
    answers = cleaned.split()

    normalized_answers = []
    valid_answers = set()

    for answer in answers:
        normalized = normalize_answer(answer)
        # üî• –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if normalized and normalized not in valid_answers:
            normalized_answers.append(normalized)
            valid_answers.add(normalized)

    return normalized_answers


# üî• –í–†–ï–ú–ï–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï –î–õ–Ø –°–ï–°–°–ò–ô
user_sessions = {}


# ===============================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π Webhook
# ===============================
@app.route("/", methods=["POST"])
def main():
    try:
        req = request.json
        if not req:
            return jsonify_error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")

        command = req["request"]["command"].strip().lower()
        session = req.get("session", {})
        session_id = session.get("session_id")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: –∫–æ–º–∞–Ω–¥–∞='{command}', session_id={session_id}")

        # üî• –ü–û–õ–£–ß–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ò–ó –ù–ê–®–ï–ì–û –•–†–ê–ù–ò–õ–ò–©–ê
        user_state = user_sessions.get(session_id, {})

        response = {
            "version": req["version"],
            "session": req["session"],
            "response": {"end_session": False, "text": "", "buttons": []},
            "session_state": {}
        }

        # 1Ô∏è‚É£ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if session.get("new", False):
            user_sessions[session_id] = {}
            buttons = [{"title": name} for name in sheet_names]
            response["response"]["text"] = "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            response["response"]["buttons"] = buttons
            logger.info("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
            return jsonify(response)

        # üî¥ –í–ê–ñ–ù–û: –ü–ï–†–í–û–ï - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        # 2Ô∏è‚É£ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã)
        if any(nav_cmd in command for nav_cmd in ["–Ω–∞–∑–∞–¥", "–º–µ–Ω—é", "–≥–ª–∞–≤–Ω–∞—è", "–≤—ã—Ö–æ–¥"]):
            user_sessions[session_id] = {}
            buttons = [{"title": name} for name in sheet_names]
            response["response"]["text"] = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
            response["response"]["buttons"] = buttons
            logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
            return jsonify(response)

        # 3Ô∏è‚É£ –ü–æ–º–æ—â—å
        if command in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–ø—Ä–∞–≤–∏–ª–∞"]:
            if user_state.get("mode") == "question":
                response["response"]["text"] = (
                    f"–í—ã –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–º–µ '{user_state['topic']}'. "
                    f"–ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (1-6) –∏–ª–∏ –±—É–∫–≤—É (–ê-–ï). "
                    f"–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: '1 2' –∏–ª–∏ '–∞ –±'. "
                    f"–ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
            else:
                response["response"]["text"] = (
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É! "
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–Ω–∞–∑–∞–¥' –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
                )
            response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
            logger.info("–ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–º–æ—â—å")
            return jsonify(response)

        # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        for sheet_name in sheet_names:
            if command == sheet_name.lower():
                topic = sheet_name
                question = get_random_question(topic)
                if not question:
                    response["response"]["text"] = f"–í —Ç–µ–º–µ '{topic}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
                    response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
                    logger.warning(f"–í —Ç–µ–º–µ '{topic}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
                    return jsonify(response)

                options_text = "\n".join([f"{opt}" for opt in question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if question["–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
                response_text = (
                    f'–¢–µ–º–∞: "{topic}"\n\n'
                    f'{question["–í–æ–ø—Ä–æ—Å"]}\n\n'
                    f'{options_text}'
                )

                if len(response_text) > 1000:
                    response_text = response_text[:997] + "..."

                response["response"]["text"] = response_text
                response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]

                # üî• –°–û–•–†–ê–ù–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï
                user_sessions[session_id] = {
                    "topic": topic,
                    "question": question,
                    "previous_questions": [question["–í–æ–ø—Ä–æ—Å"]],
                    "mode": "question"
                }

                logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ '{topic}', —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                return jsonify(response)

        # 5Ô∏è‚É£ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_state.get("mode") == "question" and user_state.get("topic") and user_state.get("question"):
            topic = user_state["topic"]
            current_question = user_state["question"]
            previous_questions = user_state.get("previous_questions", [])

            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–º—ã '{topic}': '{command}'")

            # üî• –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç—ã
            user_answers = parse_multiple_answers(command)
            correct_answers_normalized = normalize_correct_answers(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])

            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {user_answers}")
            logger.info(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers_normalized}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π
            if not user_answers:
                response["response"]["text"] = (
                    f"–ù–µ –ø–æ–Ω—è–ª –æ—Ç–≤–µ—Ç '{command}'. "
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã 1-6 –∏–ª–∏ –±—É–∫–≤—ã –ê-–ï. "
                    f"–ü—Ä–∏–º–µ—Ä: '1', '–∞', '1 2', '–∞ –±'. "
                    f"–ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
                )
                response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
                user_sessions[session_id] = user_state
                logger.info(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: '{command}'")
                return jsonify(response)

            # üî• –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –û–¢–í–ï–¢–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
            correct_given = [ans for ans in user_answers if ans in correct_answers_normalized]
            incorrect_given = [ans for ans in user_answers if ans not in correct_answers_normalized]

            logger.info(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤: {correct_given}")
            logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_given}")

            # üî• –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π
            if not incorrect_given and len(correct_given) == len(correct_answers_normalized):
                # üî• –í–°–ï –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –≤—ã–±—Ä–∞–Ω—ã –í–°–ï –Ω—É–∂–Ω—ã–µ
                logger.info("‚úÖ –í–°–ï –û–¢–í–ï–¢–´ –ü–†–ê–í–ò–õ–¨–ù–´–ï")
                text = f"‚úÖ –í–µ—Ä–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
            elif not incorrect_given and len(correct_given) > 0:
                # üî• –í–´–ë–†–ê–ù–´ –¢–û–õ–¨–ö–û –ü–†–ê–í–ò–õ–¨–ù–´–ï –æ—Ç–≤–µ—Ç—ã, –Ω–æ –Ω–µ –≤—Å–µ
                logger.info("üü° –ß–ê–°–¢–ò–ß–ù–û –ü–†–ê–í–ò–õ–¨–ù–´–ô - –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
                missing = [ans for ans in correct_answers_normalized if ans not in user_answers]
                missing_text = ", ".join([f"{ans.upper()})" for ans in missing])
                text = f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing_text}"
            elif len(correct_given) > 0 and len(incorrect_given) > 0:
                # üî• –ï–°–¢–¨ –ò –ü–†–ê–í–ò–õ–¨–ù–´–ï –ò –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –æ—Ç–≤–µ—Ç—ã
                logger.info("üü° –°–ú–ï–®–ê–ù–ù–´–ô –û–¢–í–ï–¢ - –µ—Å—Ç—å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
                correct_text = ", ".join([f"{ans.upper()})" for ans in correct_given])
                incorrect_text = ", ".join([f"{ans.upper()})" for ans in incorrect_given])
                all_correct_text = ", ".join(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])
                text = f"üü° –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {correct_text}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {incorrect_text}\n–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {all_correct_text}"
            else:
                # üî• –í–°–ï –æ—Ç–≤–µ—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                logger.info("‚ùå –í–°–ï –û–¢–í–ï–¢–´ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï")
                correct_text = ", ".join(current_question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])
                text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}"

            # üî• –°–õ–ï–î–£–Æ–©–ò–ô –í–û–ü–†–û–° (–í–°–ï–ì–î–ê, –∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
            next_question = get_random_question(topic, previous_questions)
            if next_question:
                options_text = "\n".join([f"{opt}" for opt in next_question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if next_question[
                    "–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
                text += (
                    f"\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_question['–í–æ–ø—Ä–æ—Å']}\n\n"
                    f"{options_text}"
                )
                if len(text) > 1000:
                    text = text[:997] + "..."

                # üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï
                updated_previous_questions = previous_questions + [next_question["–í–æ–ø—Ä–æ—Å"]]
                user_sessions[session_id] = {
                    "topic": topic,
                    "question": next_question,
                    "previous_questions": updated_previous_questions,
                    "mode": "question"
                }
                logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")
            else:
                text += "\n\nüéâ –í–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Ç–µ–º–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
                user_sessions[session_id] = {}
                logger.info("–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

            response["response"]["text"] = text
            response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
            return jsonify(response)

        # 6Ô∏è‚É£ –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        buttons = [{"title": name} for name in sheet_names]
        response["response"]["text"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ üëá"
        response["response"]["buttons"] = buttons
        logger.info(f"–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{command}'")
        return jsonify(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify_error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def jsonify_error(message):
    return jsonify({
        "version": "1.0",
        "response": {"text": message, "end_session": False},
        "session_state": {}
    })


@app.route("/", methods=["GET"])
def home():
    return jsonify({
        "status": "success",
        "message": "–ù–∞–≤—ã–∫ –ê–ª–∏—Å—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "active_sessions": len(user_sessions),
        "topics_loaded": list(quizzes.keys())
    })


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ù–ê –ü–û–†–¢–£ {port}")
    app.run(host="0.0.0.0", port=port, debug=False)