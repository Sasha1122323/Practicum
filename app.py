from flask import Flask, request, jsonify
import openpyxl
import random
import re
import os

app = Flask(__name__)

# üìÇ –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
excel_path = os.path.join(BASE_DIR, "questions.xlsx")

if not os.path.exists(excel_path):
    raise FileNotFoundError(f"–§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
workbook = openpyxl.load_workbook(excel_path)
sheet_names = workbook.sheetnames


# ===============================
# üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤
# ===============================
def parse_options(options_str):
    if not options_str:
        return []
    return [opt.strip() for opt in str(options_str).split(';') if opt.strip()]


def parse_correct(correct_str):
    if not correct_str:
        return []
    correct_list = []
    for item in str(correct_str).split(";"):
        match = re.match(r"([–ê-–Ø–ÅA-Z]\))", item.strip())
        if match:
            correct_list.append(match.group(1))
    return correct_list


quizzes = {}
for sheet_name in sheet_names:
    sheet = workbook[sheet_name]
    data = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if all(cell is None for cell in row):
            continue
        question, options, correct, explanation = (row + (None, None, None, None))[:4]
        if not question:
            continue
        data.append({
            "–í–æ–ø—Ä–æ—Å": str(question).strip(),
            "–í–∞—Ä–∏–∞–Ω—Ç—ã": parse_options(options),
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π": parse_correct(correct),
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": str(explanation).strip() if explanation else ""
        })
    quizzes[sheet_name] = data


def get_random_question(topic):
    if topic not in quizzes or not quizzes[topic]:
        return None
    return random.choice(quizzes[topic])


# ===============================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π Webhook
# ===============================
@app.route("/", methods=["POST"])
def main():
    req = request.json
    command = req["request"]["command"].strip().lower()
    session = req.get("session", {})
    state = req.get("state", {}).get("session", {})

    response = {
        "version": req["version"],
        "session": req["session"],
        "response": {"end_session": False, "text": "", "buttons": []}
    }

    # 1Ô∏è‚É£ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if session.get("new", False):
        buttons = [{"title": name} for name in sheet_names]
        response["response"]["text"] = "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        response["response"]["buttons"] = buttons
        return jsonify(response)

    # 2Ô∏è‚É£ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if command in ["–Ω–∞–∑–∞–¥", "–≤ –º–µ–Ω—é", "–º–µ–Ω—é", "–≥–ª–∞–≤–Ω–∞—è"]:
        buttons = [{"title": name} for name in sheet_names]
        response["response"]["text"] = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
        response["response"]["buttons"] = buttons
        response["session_state"] = {}
        return jsonify(response)

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    for sheet_name in sheet_names:
        if command == sheet_name.lower():
            topic = sheet_name
            question = get_random_question(topic)
            if not question:
                response["response"]["text"] = f"–í —Ç–µ–º–µ '{topic}' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
                response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
                return jsonify(response)

            options_text = "\n".join([f"{opt}" for opt in question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if question["–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
            response["response"]["text"] = (
                f'–¢–µ–º–∞: "{topic}"\n\n'
                f'{question["–í–æ–ø—Ä–æ—Å"]}\n\n'
                f'{options_text}'
            )
            response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
            response["session_state"] = {"topic": topic, "question": question}
            return jsonify(response)

    # 4Ô∏è‚É£ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if state.get("topic") and state.get("question"):
        topic = state["topic"]
        question = state["question"]
        correct_answers = [c.lower().replace(")", "").strip() for c in question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"]]

        user_answer = command.replace(")", "").replace(".", "").strip().lower()

        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–∏—Ñ—Ä 1/2/3 ‚Üí –∞/–±/–≤
        letter_map = {"1": "–∞", "2": "–±", "3": "–≤", "4": "–≥", "5": "–¥"}
        if user_answer in letter_map:
            user_answer = letter_map[user_answer]

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        if user_answer in correct_answers:
            text = f"‚úÖ –í–µ—Ä–Ω–æ!\n\n{question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"
        else:
            correct_text = ", ".join(question["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"])
            text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}\n\n{question['–ü–æ—è—Å–Ω–µ–Ω–∏–µ']}"

        # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = get_random_question(topic)
        if next_question:
            options_text = "\n".join([f"{opt}" for opt in next_question["–í–∞—Ä–∏–∞–Ω—Ç—ã"]]) if next_question[
                "–í–∞—Ä–∏–∞–Ω—Ç—ã"] else ""
            text += (
                f"\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_question['–í–æ–ø—Ä–æ—Å']}\n\n"
                f"{options_text}"
            )
            response["session_state"] = {"topic": topic, "question": next_question}
        else:
            text += "\n\n–í–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Ç–µ–º–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
            response["session_state"] = {}

        response["response"]["text"] = text
        response["response"]["buttons"] = [{"title": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"}]
        return jsonify(response)

    # 5Ô∏è‚É£ –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    buttons = [{"title": name} for name in sheet_names]
    response["response"]["text"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ üëá"
    response["response"]["buttons"] = buttons
    return jsonify(response)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GET
@app.route("/", methods=["GET"])
def home():
    return "–ù–∞–≤—ã–∫ –ê–ª–∏—Å—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=False)